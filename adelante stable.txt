;r0 = registro especial (usado por algunas instrucciones de atmel)
;r1 = registro especial (usado por algunas instrucciones de atmel)
;r2 = I/O puerto C (sector A)
;r3 = I/O puerto D (sector B)
;r4 = I/O puerto F (Bordes bit 0= A hORIzontal, bit 1= B hORIzontal, bit 2 = derecha, bit 3 = izquierda )
;r5 = I/O puerto B (motores)
;r6 = angulo del vehiculo
;.......
;Variables del sistema
;r16 = objeto (# casilla)
;r17 = X objeto
;r18 = Y objeto
;r19 = aux 1 (RETurn aux)
;r20 = aux 2
;r21 = aux 3
;r22 = aux 4 (N casilla en busqueda o N de la secuencia)
;r23 = cuerda (DECimas de segundo, o MULtiplicador de DECimas nescesarias para una distancia especifica) 
;r24 = sectores (primeros 4 bits: 0000 A, 0001 B. ultimos 4 bits: 0000 derecha, 1000 izquierda, 11111111 es unknow)
;r25 = aux 5
;r26 = aux 6
;r27 = gua : contador de repeticiones de cuerda.
;r28 = gub : guarda el valor del primer sensor que se encendio en cada salida de la cuerda
;r29 = cua : guarda valores relacionados a sensores activos, en especifico, el ultimo sensor
;r30 = cub : guarda la conclusion del recorrido. ff=esta en 90 grados, ee=45 izquieda, dd=45 derecha. cc=avismo.
;r31 = sentido giro. derecha 0, izquierda 1
;.......
;constantes
;step = numero de veces que debe repetirse un RETardo de X milisegundos para avanzar 8cm (media casilla)
;giro = numero de veces que debe repetirse un RETardo de X milisegundos para girar 5 grados
;*** 
.dseg
.def ioa=r2
.def iob=r3
.def bordes=r4
.def motores=r5
.def angle=r6

.def objn=r16
.def objx=r17
.def objy=r18
.def aux1=r19	
.def aux2=r20
.def aux3=r21
.def aux4=r22
.def cuerda=r23
.def sector=r24
.def aux5=r25
.def aux6=r26
.def gua=r27
.def gub=r28
.def cua=r29
.def cub=r30
.def gir=r31

.equ stepstop=40;delay necesario para drenar el desplazamiento de los motores.

.equ stepb=20;un pasob es el numero de veces que hay que repetir un delay corto (20 ms es lo mas aDECuado) para generar un retroceso igual a 5,8 cm ( 23,52cm es la maxima inclinacion posible, a 45 grados, es la medida del sector*1.437 16*1.437. esto entre dos =11.76)
.equ step=20
.equ giro=15
.equ mediogiro=7

.equ backcuerda=19
.equ stepcuerda=19;un paso es el numero de veces que hay que repetir un delay corto (20 ms es lo mas aDECuado) para generar un avance igual a 10 cm ( 23,52cm es la maxima inclinacion posible, a 45 grados, es la medida del sector*1.437 16*1.437. esto entre dos =11.76)
.equ girocuerda=2;un giro es el numero de veces que hay que repetir un delay corto (20 ms es lo mas aDECuado) para generar un desvio igual a 10 grados.
.equ guamax=14 ;numero de repeticiones maxima para la cuerda en el mismo sentido. comienza en 8, reinicia a 0 para cubrir180 grados

.equ samples=0xff
.equ samplesize=37

.equ motorcount=70
.equ atrascount=80
.equ izqcount=70
.equ dercount=70

.cseg 
.include "usb1286def.inc"
.org 0000
LDI r19,0xff
;OUT portc,r19
;OUT portd,r19
;OUT portf,r19
OUT ddrb,r19
LDI r19,0
OUT portb,r19
OUT ddrd,r19
OUT ddrf,r19
OUT ddrc,r19
;ldi r16,124
;call loop
;call parar
;ldi r16,124
;call loopback
;ldi r16,30
;call loopizq
ldi r16,30
call loopder
call stop
nop

loopder:
dec r16
call der
cpi r16,0
brne loopder
ret

loopizq:
dec r16
call izq
cpi r16,0
brne loopizq
ret

loopback:
dec r16
call atras
cpi r16,0
brne loopback
ret

loop:
dec r16
call adelante
cpi r16,0
brne loop
ret

Adelantereturn:
mov r28,r8
mov r21,r11
mov r0,r20
mov r1,r19
ret

Adelante:
mov r8,r28
mov r11,r21
mov r0,r20
mov r1,r19
ldi r21,samples
ldi r28,motorcount

AdelanteA:
subi r21,1
breq Adelantereturn
ldi r20,samplesize
ldi r19,0x05
subi r28,1
brne Adelanteout
ldi r19,1
ldi r28,motorcount

Adelanteout:
out portb,r19

AdelanteB:
subi r20,1
brne AdelanteB
rjmp AdelanteA
;*****

;*****
Atrasreturn:
mov r28,r8
mov r21,r11
mov r0,r20
mov r1,r19
ret

Atras:
mov r8,r28
mov r11,r21
mov r0,r20
mov r1,r19
ldi r21,samples
ldi r28,atrascount

AtrasA:
subi r21,1
breq Atrasreturn
ldi r20,samplesize
ldi r19,0x0A
subi r28,1
brne Atrasout
ldi r19,0x02
ldi r28,atrascount

Atrasout:
out portb,r19

AtrasB:
subi r20,1
brne AtrasB
rjmp AtrasA
;****

;****
izqreturn:
mov r28,r8
mov r21,r11
mov r0,r20
mov r1,r19
ret

izq:
mov r8,r28
mov r11,r21
mov r0,r20
mov r1,r19
ldi r21,samples
ldi r28,izqcount

izqA:
subi r21,1
breq izqreturn
ldi r20,samplesize
ldi r19,0x09
subi r28,1
brne izqout
ldi r19,0x01
ldi r28,izqcount

izqout:
out portb,r19

izqB:
subi r20,1
brne izqB
rjmp izqA
;****


;****
derreturn:
mov r28,r8
mov r21,r11
mov r0,r20
mov r1,r19
ret

der:
mov r8,r28
mov r11,r21
mov r0,r20
mov r1,r19
ldi r21,samples
ldi r28,dercount

derA:
subi r21,1
breq derreturn
ldi r20,samplesize
ldi r19,0x06
subi r28,1
brne derout
ldi r19,0x00
ldi r28,dercount

derout:
out portb,r19

derB:
subi r20,1
brne derB
rjmp derA
;****

